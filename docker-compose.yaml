version: '3.8'
services:
  rabbit_mq:
    image: rabbitmq:3.13.0-management
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      timeout: 10s
      retries: 20
    networks:
      - messageBroker
      - websiteWrappers
      - analytics
    ports:
      - 15672:15672
      - 5672:5672

  proxy:
    image: nginx
    volumes:
      - type: bind
        source: default.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports: 
      - 80:80
    depends_on:
      display_service:
        condition: service_started
      user_service:
        condition: service_healthy
      property_service:
        condition: service_healthy
    networks:
      - frontend
      - backend

  user_service_db:
    image: postgres:16.2
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - userService

  user_service:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 2s
      timeout: 2s
      retries: 100
      start_period: 2s
    depends_on:
      rabbit_mq : 
        condition: service_healthy
      user_service_db :
        condition: service_healthy
    build:
      context: ./UserService
      dockerfile: Dockerfile
    volumes:
      - ./UserService:/app
    networks:
      - userService
      - backend
      - messageBroker

  analytics_service:
    depends_on:
      rabbit_mq: 
        condition: service_healthy
    build: 
      context: ./AnalyticsService
      dockerfile: Dockerfile
    volumes:
      - ./AnalyticsService:/app
    networks:
      - analyticsService
      - analytics
      
  property_service_db:
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    image: mongo:7.0.7-rc2-jammy
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - propertyService

  property_service:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 2s
      timeout: 2s
      retries: 100
      start_period: 2s
    depends_on:
      rabbit_mq : 
        condition: service_healthy
      property_service_db :
        condition: service_healthy
      analytics_service:
        condition: service_started
    build:
      context: ./PropertyService
      dockerfile: Dockerfile
    volumes:
      - ./PropertyService:/app
    networks:
      - propertyService
      - backend
      - messageBroker

  calendar_service_db:
    image: postgres:16.2
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER_CS}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_CS}
      POSTGRES_DB: ${POSTGRES_DB_CS}
    networks:
      - calendarService

  calendar_service:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 2s
      timeout: 2s
      retries: 100
      start_period: 2s
    depends_on:
      rabbit_mq : 
        condition: service_healthy
      user_service_db :
        condition: service_healthy
    build:
      context: ./CalendarService
      dockerfile: Dockerfile
    volumes:
      - ./CalendarService:/app
    networks:
      - calendarService
      - backend
      - messageBroker


  display_service:
    depends_on:
      property_service:
        condition: service_healthy
      user_service:
        condition: service_healthy
    image: display_service        
    build: 
      context: ./DisplayService 
      dockerfile: Dockerfile     
    environment:
      - VITE_APP_SERVER_URL=http://localhost  
    volumes:
      - ./DisplayService:/app
      - modules:/app/node_modules
    networks:
      - frontend
  
  website_wrappers_zooking:
    image: website_wrappers_zooking
    depends_on:
      rabbit_mq:
        condition: service_healthy
    build:
      context: ./WebsiteWrappers
      dockerfile: Dockerfile.zooking
    volumes:
      - ./WebsiteWrappers:/app
    networks:
      - websiteWrappers
    extra_hosts:
      - host.docker.internal:host-gateway

  website_wrappers_clickandgo:
    image: website_wrappers_clickandgo
    depends_on:
      rabbit_mq:
        condition: service_healthy
    build:
      context: ./WebsiteWrappers
      dockerfile: Dockerfile.clickandgo
    volumes:
      - ./WebsiteWrappers:/app
    networks:
      - websiteWrappers
    extra_hosts:
      - host.docker.internal:host-gateway


  website_wrappers_earthstayin:
    image: website_wrappers_earthstayin
    depends_on:
      rabbit_mq:
        condition: service_healthy
    build:
      context: ./WebsiteWrappers
      dockerfile: Dockerfile.earthstayin
    volumes:
      - ./WebsiteWrappers:/app
    networks:
      - websiteWrappers
    extra_hosts:
      - host.docker.internal:host-gateway
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    container_name: elasticsearch
    restart: always
    environment:
      - node.name=elasticsearch
      - cluster.name=es-cluster-8
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - analyticsService
      
  kibana:
    image: docker.elastic.co/kibana/kibana:8.3.3
    restart: always
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - analyticsService

volumes:
  modules:
  esdata:

networks:
  frontend:
  backend:
  userService:
  messageBroker:
  propertyService:
  calendarService:
  analyticsService:
  analytics:
  websiteWrappers:
